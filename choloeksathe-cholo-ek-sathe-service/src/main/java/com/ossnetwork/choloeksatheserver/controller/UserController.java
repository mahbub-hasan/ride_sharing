package com.ossnetwork.choloeksatheserver.controller;

import com.ossnetwork.choloeksatheserver.model.ActivityInfo;
import com.ossnetwork.choloeksatheserver.model.CarInfo;
import com.ossnetwork.choloeksatheserver.model.RequestInfo;
import com.ossnetwork.choloeksatheserver.model.UserInfo;
import com.ossnetwork.choloeksatheserver.model.response.*;
import com.ossnetwork.choloeksatheserver.repository.ActivityInfoRepository;
import com.ossnetwork.choloeksatheserver.repository.RequestInfoRepository;
import com.ossnetwork.choloeksatheserver.repository.UserCategoryRepository;
import com.ossnetwork.choloeksatheserver.repository.UserInfoRepository;
import com.ossnetwork.choloeksatheserver.services.EmailService;
import com.ossnetwork.choloeksatheserver.services.SMSService;
import com.ossnetwork.choloeksatheserver.utils.CommonConstant;
import com.ossnetwork.choloeksatheserver.utils.CommonTask;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;
import sun.security.provider.MD5;

import javax.annotation.security.PermitAll;
import javax.persistence.EntityManager;
import javax.persistence.ParameterMode;
import javax.persistence.PersistenceContext;
import javax.persistence.StoredProcedureQuery;
import javax.servlet.ServletContext;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping(value = "/api/user_info")
public class UserController {

    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    UserInfoRepository userInfoRepository;

    @Autowired
    UserCategoryRepository userCategoryRepository;

    @Autowired
    ServletContext servletContext;

    @Autowired
    EmailService emailService;

    @Autowired
    SMSService smsService;

    @Autowired
    RequestInfoRepository requestInfoRepository;

    @Autowired
    ActivityInfoRepository activityInfoRepository;

    /**
     * User registration
     * @param userInfo
     * @return RegistrationResponse
     */
    @RequestMapping(method = RequestMethod.POST, value = "/registration", consumes = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    @PermitAll
    public RegistrationResponse userRegistration(@RequestBody UserInfo userInfo){
        try {
            // check email already exists
            UserInfo checkEmail = userInfoRepository.findByUserName(userInfo.getUserName());
            if(checkEmail == null){
                UserInfo checkMobileNumber = userInfoRepository.findByMobileNumberIsLike(userInfo.getMobileNumber());
                if(checkMobileNumber == null){
                    // setPassword
                    String appPassword = CommonTask.getAutoGeneratedPassword();
                    // convert password into md5 hash code
                    userInfo.setPassword(CommonTask.getMD5EncodedPassword(appPassword,false));


                    userInfo.setEmail(false);
                    userInfo.setMobileNumberVerified(false);
                    userInfo.setActive(true);
                    UserInfo newUserRegistration = userInfoRepository.save(userInfo);
                    if(newUserRegistration.getUserId() > 0) {
                        // send password to user email for verification
                        emailService.sendEmail(newUserRegistration.getUserName(),"Verification", appPassword, newUserRegistration.getFirstName(), newUserRegistration.getMobileNumber());
                        return new RegistrationResponse(HttpStatus.OK.value(), "User signUp successfully completed.", true);
                    }
                }else{
                    return new RegistrationResponse(HttpStatus.IM_USED.value(), "Mobile number already exists. Please try with different mobile number", false);
                }
            }else{
                return new RegistrationResponse(HttpStatus.IM_USED.value(), "Email already used. Please try with different email address.", false);
            }
        }catch (Exception ex){
            return new RegistrationResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }
        return new RegistrationResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), "User signUp failed. Please try again", false);
    }

    /**
     * This function is working for user authentication
     * @param mobileNumber (User Mobile Number)
     * @param password (User Desire password)
     * @return LoginResponse
     */
    @RequestMapping(method = RequestMethod.GET, value = "/login/{mobilenumber}/{password}")
    @ResponseBody
    public LoginResponse userLogin(@PathVariable(value = "mobilenumber") String mobileNumber, @PathVariable(value = "password") String password){
        int requestID = 0, activityId = 0, carId = 0, numberOfSit = 0;
        try {
            Optional<UserInfo> userInfo = userInfoRepository.findByMobileNumberAndPassword(mobileNumber, CommonTask.getMD5EncodedPassword(password, false));
            if(userInfo.isPresent()){

                if(userInfo.get().getUserCategoryId()==1 || userInfo.get().getUserCategoryId()==3){
                    // get car information
                    if(userInfo.get().getCarInfosByUserId() != null && userInfo.get().getCarInfosByUserId().size()>0){
                        carId = userInfo.get().getCarInfosByUserId().stream().findFirst().get().getCarInfoId();
                        numberOfSit = userInfo.get().getCarInfosByUserId().stream().findFirst().get().getNumberofSeat();
                    }
                    // get any current request
                    RequestInfo requestInfo = requestInfoRepository.findTop1ByUserInfoByRequesterIdOrderByRequestIdDesc(userInfo.get());
                    if(requestInfo != null){
                        if(requestInfo.getRequestStatusInfoByRequestStatusId().getRequestStatusId() == 1 ||
                                requestInfo.getRequestStatusInfoByRequestStatusId().getRequestStatusId() == 4 ||
                                requestInfo.getRequestStatusInfoByRequestStatusId().getRequestStatusId() == 6){
                            requestID = requestInfo.getRequestId();
                        }
                    }
                }else if(userInfo.get().getUserCategoryId()==2){
                    ActivityInfo activityInfo = activityInfoRepository.findTop1ByUserInfoByPassengerIdOrderByActivityIdDesc(userInfo.get());
                    if(activityInfo != null){
                        if(activityInfo.getActivityStatusInfoByActivityStatusId().getActivityStatusId()==1 ||
                                activityInfo.getActivityStatusInfoByActivityStatusId().getActivityStatusId() == 2 ||
                                activityInfo.getActivityStatusInfoByActivityStatusId().getActivityStatusId() == 4){
                            activityId = activityInfo.getActivityId();
                        }
                    }
                }

                return new LoginResponse(HttpStatus.OK.value(), "Login successfully done.",true,
                        userInfo.get().getUserId(), carId, userInfo.get().getUserCategoryId(), requestID, activityId,
                        userInfo.get().getEmail(), userInfo.get().getMobileNumberVerified(),
                        userInfo.get().getProfileApprovedByAdmin() != null?userInfo.get().getProfileApprovedByAdmin():false,
                        userInfo.get().getActive()!=null?userInfo.get().getActive():false, numberOfSit);
            }
        }catch (Exception ex){
            return new LoginResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }
        return new LoginResponse(HttpStatus.NOT_FOUND.value(), "UserName or Password mismatch", false);
    }

    /**
     * Change user password based on user id
     * @param password
     * @param user_id
     * @return BaseResponse
     */
    @RequestMapping(method = RequestMethod.GET, value = "/password_change/{password}/{user_id}")
    @ResponseBody
    public BaseResponse userPasswordChange(@PathVariable(value = "password") String password, @PathVariable(value = "user_id") int user_id){
        try {
            UserInfo userInfo = userInfoRepository.findOne(user_id);
            if(userInfo != null){
                userInfo.setPassword(CommonTask.getMD5EncodedPassword(password, false));
                userInfo.setEmail(true);

                userInfoRepository.save(userInfo);
                return new BaseResponse(HttpStatus.OK.value(), "Success", true);
            }
        }catch (Exception ex){
            return new BaseResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }
        return new BaseResponse(HttpStatus.OK.value(), "Server error", false);
    }

    /**
     * Seeking information from user by user id
     * @param id (means user id)
     * @return UserProfileResponseRoot
     */
    @GetMapping(value = "/user_profile/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public UserProfileResponseRoot getUserInfoById(@PathVariable(value = "id") int id){
        try{
            Optional<UserInfo> userInfos = userInfoRepository.findByUserId(id);
            if(userInfos.isPresent()){
                UserProfileResponse response = new UserProfileResponse(userInfos.get().getUserId(),
                        userInfos.get().getFirstName(), userInfos.get().getUserName(), userInfos.get().getMobileNumber(),
                        userInfos.get().getNid(), userInfos.get().getGender(), userInfos.get().getDob()!=null?userInfos.get().getDob():new Timestamp(new Date().getTime()), userInfos.get().getAddress(),
                        userInfos.get().getHomeLatitude()!=null?userInfos.get().getHomeLatitude():0.0,
                        userInfos.get().getHomeLongitude()!=null?userInfos.get().getHomeLongitude():0.0, userInfos.get().getFacebookLink(),
                        userInfos.get().getImageLocation(),
                        "",
                        userInfos.get().getEmail(), userInfos.get().getMobileNumberVerified());
                return new UserProfileResponseRoot(HttpStatus.OK.value(), "Success", true, response);
            }
        }catch (Exception ex){
            return new UserProfileResponseRoot(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false, null);
        }
        //return null;
        return new UserProfileResponseRoot(HttpStatus.OK.value(), "Success", false, new UserProfileResponse());
    }

    /**
     * Update user information
     * @param userInfo
     * @return UserProfileUpdateResponse
     */
    @PostMapping(value = "/user_profile/update")
    public UserProfileUpdateResponse userProfileUpdateById(@RequestBody UserInfo userInfo){
        try {
            UserInfo oldUserInfo = userInfoRepository.findOne(userInfo.getUserId());
            if(oldUserInfo != null) {
                if (userInfo.getImageLocation() != null && !userInfo.getImageLocation().isEmpty()) {
                    File file = File.createTempFile("USER_" + new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + "_", ".jpg", CommonTask.getImageDirectory(servletContext));
                    FileOutputStream fos = new FileOutputStream(file);
                    fos.write(Base64.getDecoder().decode(userInfo.getImageLocation()));
                    fos.close();
                    oldUserInfo.setImageLocation("http://"+CommonTask.getIP()+":"+ CommonConstant.PORT+"/cholo-ek-sathe/"+CommonConstant.BASE_IMAGE_PATH+file.getName());
                }

                oldUserInfo.setFirstName(userInfo.getFirstName());
                oldUserInfo.setMobileNumber(userInfo.getMobileNumber());
                oldUserInfo.setUserName(userInfo.getUserName());
                oldUserInfo.setGender(userInfo.getGender());
                oldUserInfo.setDob(userInfo.getDob());
                oldUserInfo.setNid(userInfo.getNid());
                oldUserInfo.setAddress(userInfo.getAddress());
                oldUserInfo.setFacebookLink(userInfo.getFacebookLink());
                oldUserInfo.setHomeLatitude(userInfo.getHomeLatitude());
                oldUserInfo.setHomeLongitude(userInfo.getHomeLongitude());

                if (userInfoRepository.save(oldUserInfo).getUserId() > 0) {
                    return new UserProfileUpdateResponse(HttpStatus.OK.value(), "Update successfully done", true);
                }
            }
        }catch (Exception ex){
            ex.printStackTrace();
        }

        return new UserProfileUpdateResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), "Update failed.", false);
    }

    /**
     * User logout service.
     * @param userid
     * @return BaseResponse
     */
    @GetMapping(value = "/logout/{user_id}")
    public BaseResponse userLogout(@PathVariable(value = "user_id") int userid){
        try {
            UserInfo userInfo = userInfoRepository.findOne(userid);
            if(userInfo != null){
                userInfo.setFcmKey("");
                userInfoRepository.save(userInfo);
            }
            return new BaseResponse(HttpStatus.OK.value(), "success", true);
        }catch (Exception ex){
            return new BaseResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }
    }

    /**
     * User mobile verification process for getting 6 digit verification code.
     * @param id
     * @param mobileNumber
     * @return BaseResponse
     */
    @GetMapping(value = "/mobile_verification/{id}/{mobile_number}")
    public BaseResponse requestForMobileVerificationSMS(@PathVariable(value = "id") int id, @PathVariable(value = "mobile_number") String mobileNumber){
        try {
            String code = CommonTask.getMobileVerificationCode();
            smsService.sendSMS(mobileNumber, code);

            StoredProcedureQuery mobileVerificationSMS = entityManager.createStoredProcedureQuery("MobileVerificationCodeMobil_Set");
            mobileVerificationSMS.registerStoredProcedureParameter("UserLoginInfoId", Integer.class, ParameterMode.IN);
            mobileVerificationSMS.registerStoredProcedureParameter("VerificationCode", String.class, ParameterMode.IN);
            mobileVerificationSMS.registerStoredProcedureParameter("MobileNo", String.class, ParameterMode.IN);
            mobileVerificationSMS.registerStoredProcedureParameter("Remarks", String.class, ParameterMode.IN);
            mobileVerificationSMS.registerStoredProcedureParameter("Status", String.class, ParameterMode.OUT);

            mobileVerificationSMS.setParameter("UserLoginInfoId",id);
            mobileVerificationSMS.setParameter("VerificationCode",code);
            mobileVerificationSMS.setParameter("MobileNo",mobileNumber);
            mobileVerificationSMS.setParameter("Remarks","");

            Object result = mobileVerificationSMS.getOutputParameterValue("Status");
            if(result instanceof String){
                if(result.equals("Success")){
                    return new BaseResponse(HttpStatus.OK.value(), "Success", true);
                }else{
                    return new BaseResponse(HttpStatus.OK.value(), "Failed", false);
                }
            }
        }catch (Exception ex){
            return new BaseResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }

        return new BaseResponse(HttpStatus.OK.value(), "Server Error", false);
    }

    /**
     * Mobile verification code verify
     * @param id
     * @param mobileNumber
     * @param code
     * @return BaseResponse
     */
    @GetMapping(value = "/mobile_verification_verify/{id}/{mobile_number}/{code}")
    public BaseResponse checkVerificationOfMobile(@PathVariable(value = "id") int id, @PathVariable(value = "mobile_number") String mobileNumber, @PathVariable(value = "code") String code){
        try {
            StoredProcedureQuery verifyMobile = entityManager.createStoredProcedureQuery("VerificationCodeMobile_Check");

            verifyMobile.registerStoredProcedureParameter("UserLoginInfoId", Integer.class, ParameterMode.IN);
            verifyMobile.registerStoredProcedureParameter("VerificationCode", String.class, ParameterMode.IN);
            verifyMobile.registerStoredProcedureParameter("MobileNo", String.class, ParameterMode.IN);
            verifyMobile.registerStoredProcedureParameter("Status", String.class, ParameterMode.OUT);

            verifyMobile.setParameter("UserLoginInfoId", id);
            verifyMobile.setParameter("VerificationCode", code);
            verifyMobile.setParameter("MobileNo", mobileNumber);

            Object result = verifyMobile.getOutputParameterValue("Status");
            if(result instanceof String){
                if(result.equals("Success")){
                    return new BaseResponse(HttpStatus.OK.value(), "Success", true);
                }else{
                    return new BaseResponse(HttpStatus.OK.value(), "Failed", false);
                }
            }

        }catch (Exception ex){
            return new BaseResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), ex.getMessage(), false);
        }
        return new BaseResponse(HttpStatus.OK.value(), "Server Error", false);
    }

    /**
     * This function is working for change/update user fcm key.
     * @param fcmKeyChangeRequest
     * @return BaseResponse
     */
    @RequestMapping(method = RequestMethod.POST, value = "/change_fcm_key")
    @ResponseBody
    public BaseResponse changeUserFCMKey(@RequestBody FCMKeyChangeRequest fcmKeyChangeRequest){
        UserInfo userInfo = userInfoRepository.findOne(fcmKeyChangeRequest.getUserId());
        if(userInfo != null){
            if(userInfo.getFcmKey() != null && !userInfo.getFcmKey().isEmpty() && userInfo.getFcmKey().equals(fcmKeyChangeRequest.getFcmKey())){
                return new BaseResponse(HttpStatus.CONFLICT.value(), "FCM key already exists", false);
            }
            userInfo.setFcmKey(fcmKeyChangeRequest.getFcmKey());
            userInfoRepository.save(userInfo);
        }
        return new BaseResponse(HttpStatus.OK.value(), "Success", true);
    }


}
