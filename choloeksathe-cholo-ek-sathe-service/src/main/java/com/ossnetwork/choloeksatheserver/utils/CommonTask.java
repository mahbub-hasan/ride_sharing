package com.ossnetwork.choloeksatheserver.utils;

import com.ossnetwork.choloeksatheserver.model.response.BaseResponse;
import com.ossnetwork.choloeksatheserver.model.response.DriverStopOver;
import org.springframework.http.HttpStatus;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;

import javax.persistence.EntityManager;
import javax.persistence.ParameterMode;
import javax.persistence.StoredProcedureQuery;
import javax.servlet.ServletContext;
import java.io.File;
import java.math.BigDecimal;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class CommonTask {

    public static File getImageDirectory(ServletContext servletContext) {
        File imageDirectory = new File(servletContext.getRealPath("/").concat(CommonConstant.BASE_IMAGE_PATH));
        System.out.println(imageDirectory.getAbsolutePath());
        if(!imageDirectory.exists())
            imageDirectory.mkdirs();
        return imageDirectory;
    }

    /**
     * @param lat1 Passenger start Latitude in double
     * @param lat2 Driver start latitude in double
     * @param lang1 Passenger end longitude in double
     * @param lang2 Driver end longitude in double
     * @return double value (2 location distance in meter)
     */
    public static double distanceFrom2Location(double lat1, double lat2, double lang1, double lang2){
        try {
            double earthRadios = 6371000; // meter
            double dLat = Math.toRadians(lat2-lat1);
            double dLng = Math.toRadians(lang2-lang1);
            double angel = Math.sin(dLat/2) * Math.sin(dLat/2) +
                            Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                            * Math.sin(dLng/2) * Math.sin(dLng/2);
            double distance = earthRadios * (2 * Math.atan2(Math.sqrt(angel), Math.sqrt(1-angel)));
            return distance;
        }catch (Exception ex){
            ex.printStackTrace();
            return 0.0f;
        }
    }

    public static String getAutoGeneratedPassword(){
        String SALTCHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890abcdefghijklmnopqraruvwxyz";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 6) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
    }

    public static String getMobileVerificationCode(){
        String SALTCHARS = "0123456789";
        StringBuilder salt = new StringBuilder();
        Random rnd = new Random();
        while (salt.length() < 6) { // length of the random string.
            int index = (int) (rnd.nextFloat() * SALTCHARS.length());
            salt.append(SALTCHARS.charAt(index));
        }
        String saltStr = salt.toString();
        return saltStr;
    }

    public static boolean isSourceLocationAccess(double pStartLat, double pStartLan, double pStopLat, double pStopLan,
                                          ArrayList<Double> mainSource, ArrayList<Double> mainDestination,
                                          ArrayList<DriverStopOver> stopOvers){
        boolean result = false;
        ArrayList<Double> startPoints;
        ArrayList<Double> stopPoints;

        try {

            startPoints = new ArrayList<>();
            stopPoints = new ArrayList<>();

            startPoints.add(distanceFrom2Location(pStartLat, mainSource.get(0),pStartLan, mainSource.get(1))/1000);
            if(stopOvers != null){
                stopOvers.forEach(driverStopOver -> {
                    startPoints.add(distanceFrom2Location(pStartLat, driverStopOver.getStartLatitude(), pStartLan, driverStopOver.getStartLongitude())/1000);
                    stopPoints.add(distanceFrom2Location(pStopLat, driverStopOver.getStopLatitude(), pStopLan, driverStopOver.getStopLongitude())/1000);
                });
            }
            stopPoints.add(distanceFrom2Location(pStopLat, mainDestination.get(0), pStopLan, mainDestination.get(1)));


            boolean startFinalResult = startPoints.stream().anyMatch(aDouble -> aDouble>0.0 && aDouble<=3.0);
            boolean endFinalResult = stopPoints.stream().anyMatch(aDouble -> aDouble>0.0&&aDouble<=2);

            result = startFinalResult && endFinalResult;

        }catch (Exception ex){
            ex.printStackTrace();
        }

        return result;
    }

    public static String getIP(){
        try {
            InetAddress address = InetAddress.getLocalHost();
            return address.getHostAddress();
        }catch (Exception ex){
            System.out.println(ex.getMessage());
        }
        return null;
    }

    public static double getRating(EntityManager entityManager, int userID){
        try {
            StoredProcedureQuery ratingSP = entityManager.createStoredProcedureQuery("Rative_review_view_get");
            ratingSP.registerStoredProcedureParameter("Userid", Integer.class, ParameterMode.IN);

            ratingSP.setParameter("Userid",userID);
            List<Object[]> result = ratingSP.getResultList();
            if(result != null && result.size()>0){
                Object[] res = result.get(0);
                return ((BigDecimal) res[1]).doubleValue();
            }
        }catch (Exception ex){
            ex.printStackTrace();
        }
        return 0.0;
    }

    /**
     * This function is send md5 encoded password if needed.
     * @param rawPassword
     * @param encoded
     * @return String
     */
    public static String getMD5EncodedPassword(String rawPassword, boolean encoded){
        if(encoded) {
            Md5PasswordEncoder md5PasswordEncoder = new Md5PasswordEncoder();
            return md5PasswordEncoder.encodePassword(rawPassword, "_ABC&123%XYZ$789_");
        }else{
            return rawPassword;
        }
    }
}
